题目描述
听说大家都了解什么是 ADT 了.
现在给大家引入一种数据结构, 并查集 (Union-find Set). 其用途是, 实现集合的 Union 操作, 以及输出某个集合的最小元素.
对应的接口为:
class UnionFindSet {
public:
  UnionFindSet(int n = 0); // 初始化集合, UnionFindSet  u(n) 会定义出 n 个单元素集合. 
  int setid(int x); // 输出 x 所在集合的最小元素
  void merge(int x, int y); // 合并 x 和 y 所在的集合. 
} ;
用法为:
  UnionFindSet u(5);  //初始化出 5 个单元素集合, {0}, {1}, {2}, {3}, {4}
  u.merge(1, 3); // 合并 1 和 3 所在的集合, 现在集合变成 {0}, {1, 3}, {2}, {4}
  u.merge(2, 4); // 合并 2 和 4 所在的集合, 现在集合变成 {0}, {1, 3}, {2, 4}
  u.merge(3, 4); // 合并 3 和 4 所在的集合, 现在集合变成 {0}, {1, 2, 3, 4}
  for (int i = 0; i < 5; i++) cout << u.setid(i) << ' '; // 输出每个元素所在集合里面的最小元素, 会输出 0, 1, 1, 1, 1
题目是, 读入 n,m, 一开始有 n 个单元素集合 (从 0 到 n−1), 有 m 次集合合并操作, 每次操作读入 x,y, 合并 x,y 所在的集合.
最后输出, 经过mm 次合并之后, 还剩下多少个集合.

样例
样例输入 1
5 3
1 3
2 4
3 4
样例输出 1
2
样例输入 2
5 3
0 4 
2 3
2 2
样例输出 2
3
数据范围与提示
1≤n,m≤1000
*/

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main(void)
{
	class UnionFindSet {
	private:
		vector<int> f;
		int _setid(int x) {
			if (f[x] == x) return x;
			return f[x] = _setid(f[x]);
		}

		void _merge(int x, int y) {
			if (setid(x) < setid(y)) f[setid(y)] = setid(x);
			else f[setid(x)] = setid(y);
		}

	public:
		UnionFindSet(int n = 0) {
			f = vector<int>(n);
			for (int i = 0; i < n; i++) f[i] = i;
		}

		int setid(int x) {
			return _setid(x);
		}

		void merge(int x, int y) {
			_merge(x, y);
		}
	};

	int n, m;
	cin >> n >> m;
	UnionFindSet u(n);
	for (int i = 1; i <= m;i++)
	{
		int x, y;
		cin >> x >> y;
		u.merge(x, y);
	}
	vector<int> temp;
	for (int i = 0; i < n; i++)
		temp.push_back(u.setid(i));
	sort(temp.begin(), temp.end());
	vector<int>::iterator uni_return=unique(temp.begin(), temp.end());
	temp.erase(uni_return, temp.end());           //找到temp中有几个不一样的数，就是答案
	cout << temp.size();
	return 0;
}
