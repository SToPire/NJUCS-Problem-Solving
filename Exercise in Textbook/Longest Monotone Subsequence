/*
题目描述
This problem is taken from [ES] 24.8.
Given a sequence of n distinct integers, find the length of longest monotone subsequence.
Note that a monotone sequence can be either increasing or decreasing.

输入格式
The first line of input is a single integer nnn (1≤n≤10)(1 \leq n \leq 10)(1≤n≤10), denoting the length of the input sequence.
The second line contains n distinct space-separated integers, denoting the input sequence.
Each integer is between 111 and 100100100, inclusive.

输出格式
One integer, the length of longest monotone subsequence.

样例
Input
4
1 2 4 3
Output
3
数据范围与提示
A subsequence need NOT be contiguous in the original sequence. For sample test case, both 1 2 4 and 1 2 3 are valid longest monotone subsequence.
*/

#include<iostream>
#include<vector>
using namespace std;

int lis(vector<int> a,int n);
int lds(vector<int> a,int n);

int main(void)
{
	int n,num1,num2,max; 
	cin>>n;
	vector<int> a(n);
	for(int i=0;i<n;i++)
		cin>>a[i];
	num1=lis(a,n);
	num2=lds(a,n); 
	max=(num1>num2)?num1:num2;
	cout<<max;
	return 0;
}

int lis(vector<int> a,int n)    //动态规划法.l[i]表示以a[i]结尾的数列中,最长单调递增且以a[i]为最后一个元素的子列的长度
{
	vector<int> l(n,1);            //l数列默认值为1.这是因为一旦不存在a[j]>a[i],l[i]就为1
	for(int j=0;j<n;j++)
		for(int i=0;i<=j;i++)
				if(a[j]>a[i] && l[j]<l[i]+1) //l[j]=最大的l[i]+1    //l[i]=max{l[j]}+1 条件是a[j]>a[i]且j<i
					l[j]=l[i]+1;
	int max=0;
	for(int i=0;i<n;i++)
		if(l[i]>max)
			max=l[i];         //找到最大的l[i]即为最长单调递增子列的长度
	return max;
}

int lds(vector<int> a,int n)
{
	vector<int> l(n,1);
	for(int j=0;j<n;j++)
		for(int i=0;i<=j;i++)
				if(a[j]<a[i] && l[j]<l[i]+1)
					l[j]=l[i]+1;
	int max=0;
	for(int i=0;i<n;i++)
		if(l[i]>max)
			max=l[i];
	return max;
}
